####################################################################################################
# main
####################################################################################################

from basic_module import *
from admin_module import *
from consumer_module import *

####################################################################################################
class VendingMachine:
####################################################################################################

    def __init__(self):
        self.d = { # drink = { key: [ name, price, stock ] }
            1: ['레쓰비 마일드 커피', 600, 8],
            2: ['게토레이 레몬', 800, 8],
            3: ['밀키스', 800, 8],
            4: ['립톤 아이스티 복숭아 (재고 테스트)', 1000, 0],
            5: ['칠성사이다 (재고 테스트)', 1000, 8],
            6: ['트레비 라임', 1000, 8],
            7: ['트로피카나 스파클링 사과', 1000, 8],
            8: ['옥수수수염차', 1300, 8],
            9: ['데일리-C 레몬워터 비타민C 1000', 1500, 8],
            10: ['칸타타 콘트라베이스 콜드브루 블랙', 2000, 8]
        }

        self.c = { # cash = { face value: [ stack, insert, change ] }
            0: 0,  # balance: value
            100: [95, 0, 0],
            500: [95, 0, 0],
            1000: [95, 0, 0]
        }

####################################################################################################
# start_loop
####################################################################################################

    def start(self):
        if login() == True:
            self.admin_loop()
        else:
            self.consumer_loop()

####################################################################################################
# consumer_loop (소비자 모드)
####################################################################################################

    def consumer_loop(self):
        while True:
            # show: 판매 중인 상품과 거스름돈의 상태를 출력
            print_menu(self.d)                # 상품의 목록(번호, 상태, 가격, 이름)을 출력
            if False == print_change(self.c): # 거스름돈의 재고 상태를 확인하고 출력
                break

            # insert_cash: 돈을 투입받음
            input_cash(self.c)                # 돈을 투입받고, 세서 저장하고, 결과를 출력하는 함수

            # buy: 구매할 상품을 선택하고, 결제 진행
            print_menu(self.d, self.c)        # 상품의 목록(번호, 상태, 가격, 이름)을 출력
            key = input_key(self.d, self.c)   # 구매할 상품의 키를 입력하는 루프, 선택한 키를 반환
            pay(self.d, key, self.c)          # 결제 진행 및 결과 출력

            # return_change: 잔액 반환
            return_change(self.c)             # 잔액 반환

####################################################################################################
# admin_loop (관리자 모드)
####################################################################################################

    def admin_loop(self):
        while True:
            print_cnsl()
            i = input_cnsl()

            # manage_goods: 상품 관리
            if i == 1:      # 판매 중인 상품 출력
                print_menu(self.d, a=True)
            elif i == 2:    # 상품 재고 보충
                edit_stock(self.d)
            elif i == 3:    # 상품 이름 수정
                edit_name(self.d)
            elif i == 4:    # 상품 가격 수정
                edit_price(self.d)

            # manage_cash: 현금 관리
            elif i == 5:    # 보유 중인 현금 출력
                print_cash(self.c)
            elif i == 6:    # 현금 재고 보충
                edit_cash(self.c)

            # break
            else:           # 소비자 모드 실행
                break
        self.consumer_loop()

####################################################################################################

v = VendingMachine()
v.start()